/**
* Copyright 2016 Matthias Ludwig
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
**/
'use strict';

var Promise = require("bluebird");
var exec = Promise.promisify(require('child_process').exec);
var path = require('path');
var util = require('util');
var mkdirp = require('mkdirp-then');
const del = require('del');
var ncp = Promise.promisify(require('ncp').ncp);
var fscopy = Promise.promisify(require('fs-extra').copy);
var EasyZip = require('easy-zip2').EasyZip;
var AwsCli = require('aws-cli-js');
var S = require('string');
var fs = require('fs');


module.exports.build = function (options) {
  var debug = require('debug')('xbuild:lib/index.js build');

  //debug('options', options);


  var clean = options.clean ? '/t:clean' : '';

  var exec_command = util.format('xbuild %s %s /p:Configuration=%s', options.csproj, clean, options.configuration);

  return Promise.resolve().then(function () {


    //debug('exec_command', exec_command);

    var exec_options = {
      //env: env
    };
    if (options.cwd) {
      exec_options.cwd = options.cwd;
    }

    //debug('exec options =', exec_options);

    return exec(exec_command, exec_options);

  }).then(function (data) {
    debug('data', data);

    var result = {
      command: exec_command,
      raw: JSON.stringify(data)
    };
    //return result;
    return result;

  });

};

module.exports.buildNugetRelease =  function (options) {
  var debug = require('debug')('xbuild:lib/index.js buildNugetRelease');  

  return Promise.resolve().then(function () {
    var template_file_content = fs.readFileSync(options.path.assemblyinfo.source, 'utf8');
    template_file_content = S(template_file_content).replaceAll('@VERSION@', options.version).s;
    //debug('template_file_content', template_file_content);
    fs.writeFileSync(options.path.assemblyinfo.destination, template_file_content);
  }).then(function () {
    return module.exports.build({
      clean: true,
      csproj: options.path.csproj,
      cwd: options.path.cwd,
      configuration: options.configuration
    });
  }).then(function () {
    return module.exports.build({
      csproj: options.path.csproj,
      cwd: options.path.cwd,
      configuration: options.configuration
    });
  }).then(function () {
    return del(options.path.release + '/**', { force: true });
  }).then(function () {
    return mkdirp(options.path.release);
  }).then(function () {
    return ncp(options.path.bin.source, options.path.bin.destination);
  }).then(function () {
    //return fscopy(options.path.packagejson.source, options.path.packagejson.destination);
  }).then(function () {
    return new Promise(function (resolve) {
      var zip = new EasyZip();
      zip.zipFolder(options.path.release, { rootFolder: 'code' }, function () {
        zip.writeToFile(options.path.release_zipFile);
        resolve();
      });
    });
  }).then(function () {
    //debug('options', options);

    if (!options.uploadtos3) {
      debug('skip upload to s3');
      return;
    }
    //push to S3
    var awsCli = new AwsCli({
      aws_access_key_id: options.keys.codestore.awsAccessKeyId,
      aws_secret_access_key: options.keys.codestore.awsSecretAccessKey
    });

    var command = util.format('s3 cp %s %s --region %s', options.path.release_zipFile,
      options.path.release_s3name,
      options.keys.codestore.s3region);
    return awsCli.command(command);

  }).then(function (data) {
    debug('data', data);
  });

};


module.exports.buildNpmRelease =  function (options) {
  var debug = require('debug')('xbuild:lib/index.js buildNpmRelease');  

  return Promise.resolve().then(function () {
    return del(options.path.release + '/**', { force: true });
  }).then(function () {
    return mkdirp(options.path.release);
  }).then(function () {
    return ncp(options.path.lib.source, options.path.lib.destination);
  }).then(function () {
    return fscopy(options.path.packagejson.source, options.path.packagejson.destination);
  }).then(function () {
    return new Promise(function (resolve) {
      var zip = new EasyZip();
      zip.zipFolder(options.path.release, { rootFolder: 'code' }, function () {
        zip.writeToFile(options.path.release_zipFile);
        resolve();
      });
    });
  }).then(function () {

    if (!options.release.uploadtos3) {
      debug('skip upload to s3');
      return;
    }
    //push to S3
    var awsCli = new AwsCli({
      aws_access_key_id: options.awsAccessKeyId,
      aws_secret_access_key: options.awsSecretAccessKey
    });

    var command = util.format('s3 cp %s %s --region %s', options.path.release_zipFile,
      options.path.release_s3name,
      options.release.s3region);
    return awsCli.command(command);
  }).then(function (data) {
    debug('data', data);
  });

};